#!/bin/sh

PROGNAME="${0##*/}"
VERSION="v2.0.1"
GPP_BIN="${GPGCACHE_GPP_BIN:-/usr/lib/gnupg/gpg-preset-passphrase}"
TMPDIR="${TMPDIR:-"${XDG_RUNTIME_DIR}"}"
randstr() { tr -dc "[:alnum:]" </dev/urandom | dd count=1 bs=12 2>/dev/null; }
[ -d "${TMPDIR}" ] \
  && TMPDIR="${TMPDIR}/gpgcacher.$(randstr)" \
  || TMPDIR="/dev/shm/gpgcacher.$(randstr)"

#
# Error Codes
#
SHELL_STD_ERR=1
GPG_SIGN_FAIL=$((SHELL_STD_ERR + 1))
GPG_ENC_FAIL=$((GPG_SIGN_FAIL + 1))
GPG_DEC_FAIL=$((GPG_ENC_FAIL + 1))
GPG_KEY_NOT_FOUND=$((GPG_DEC_FAIL + 1))
GPG_AGENT_FAIL=$((GPG_KEY_NOT_FOUND + 1))
GPG_AGENT_NO_CACHE=$((GPG_AGENT_FAIL + 1))
GPP_FAIL=$((GPG_AGENT_FAIL + 1))
GPG_EXP_SSH_FAIL=$((GPP_FAIL + 1))
SSH_ADD_TEST_FAIL=$((GPG_EXP_SSH_FAIL + 1))

#
# Instead of creating a different error code for each gpg-connect-agent error,
# have one (GPG_AGENT_FAIL) and save its error message to be used with `warn()`.
# The same applies to gpg-preset-passphrase.
#
GPG_AGENT_ERRMSG=""
GPP_ERRMSG=""

#
# Warn the user through stderr with a short one line message.
# Globals
#   PROGNAME
# Parameters:
#   1: error code.
#
warn() {
  printf "%s: %s\n" "${PROGNAME}" "${1}" 1>&2
}

#
# Print to stdout a '\n' separated list of keytype, key fingerprint and
# keygrip of the sub keys.
# Globals:
#   GPG_KEY_NOT_FOUND
# Parameters:
#   1: key-id.
# Returns:
#   0, when successful;
#   GPG_KEY_NOT_FOUND, when gpg fails to find the given key-id.
#
print_trios() {
  unset gpg_output
  gpg_output="$(
    gpg --list-secret-keys --with-keygrip --with-colons "${1}" 2>/dev/null
  )" || return "${GPG_KEY_NOT_FOUND}"

  unset passed_uid_line keytype keyfpr keygrip
  while IFS=":" read -r infotype info; do
    case "${infotype}" in
      uid)
        passed_uid_line="1"
        continue
        ;;
    esac

    [ -z "${passed_uid_line}" ] && continue

    case "${infotype}" in
      ssb)
        keytype="${info%+*}"
        keytype="${keytype%:::}"
        keytype="${keytype##*:}"
        ;;
      fpr)
        keyfpr="${info%:}"
        keyfpr="${keyfpr##*:}"
        ;;
      grp)
        keygrip="${info%:}"
        keygrip="${keygrip##*:}"
        printf "%s,%s,%s\n" "${keytype}" "${keyfpr}" "${keygrip}"
        unset keytype keyfpr keygrip
        ;;
    esac
  done <<EOF
$(printf "%s\n" "${gpg_output}")
EOF

  return 0
}

#
# Cache a given sub key.
#
# Globals:
#   GPG_AGENT_FAIL
#   GPP_FAIL
#   GPP_ERRMSG
#   GPG_AGENT_ERRMSG
#
# Parameters:
#   1: keygrip; and
#   2: passphrase command (optional).
#
# Returns:
#   0, when successful;
#   GPP_FAIL, when gpg-preset-passphrase fails.
#   GPG_AGENT_FAIL, when gpg-connect-agent fails.
#
preset_passphrase() {
  if [ -z "${2}" ]; then
    unset gpg_agent_output
    gpg_agent_output="$(
      gpg-connect-agent <<EOF
GET_PASSPHRASE ${1} + Passphrase:+ No+passcmd+provide.+A+passphrase+is+needed.
EOF
)"
    case "${gpg_agent_output}" in
      ERR*)
        GPG_AGENT_ERRMSG="${gpg_agent_output}"
        unset gpg_agent_output
        return "${GPG_AGENT_FAIL}"
        ;;
    esac

    unset gpg_agent_output
  else
    unset gpp_output
    gpp_output="$(
      ${GPP_BIN} --preset "${1}" 2>&1 <<EOF
$(eval "${2}")
EOF
)" || {
  GPP_ERRMSG="${gpp_output}"
  unset gpp_output
  return "${GPP_FAIL}"
}
  fi

  return 0
}
#
# Check if a non smart card key is cached.
#
# Globals:
#   GPG_AGENT_NO_CACHE
#
# Parameters:
#   1: keygrip
#
# Returns:
#   0, when successful;
#   GPG_AGENT_NO_CACHE, when the key is not cached.
#
is_cached() {
  gpg_agent_output="$(
      gpg-connect-agent <<EOF
GET_PASSPHRASE --no-ask ${1} + Passphrase:+ No+passcmd+provide.+A+passphrase+is+needed.
EOF
)"
  case "${gpg_agent_output}" in
    OK*) return 0 ;;
    *) return "${GPG_AGENT_NO_CACHE}" ;;
  esac
}


#
# Run a command that needs the key to be cached to check if the cached
# passphrase is the correct one.
#
# Globals:
#   ALLOW_SSH_KEY_TEST
#   GPG_ENC_FAIL
#   GPG_DEC_FAIL
#   GPG_SIGN_FAIL
#   GPG_EXP_SSH_FAIL
#   SSH_ADD_TEST_FAIL
#
# Parameters:
#   1: key type;
#   2: key fingerprint.
#
# Returns:
#   0, when successful;
#   GPG_ENC_FAIL, when gpg fails to encrypt its stdin;
#   GPG_DEC_FAIL, when gpg fails do decrypt its stdin;
#   GPG_SIGN_FAIL, when gpg fails to sign its stdin;
#   GPG_EXP_SSH_FAIL, when gpg fails to export the publi ssh key;
#   SSH_ADD_TEST_FAIL, when ssh-add fails with the `-T` option.
#
is_passphrase_correct() {
  case "${1}" in
    e)
      unset gpg_output
      gpg_output="$(
        printf "\n" \
          | gpg --armor -o- \
            --no-options --yes --batch --pinentry-mode loopback \
            --encrypt --recipient "${2}" 2>/dev/null
      )" || return "${GPG_ENC_FAIL}"

      printf "%s" "${gpg_output}" \
        | gpg -o /dev/null \
          --no-options --yes --batch --pinentry-mode loopback \
          --decrypt --default-key "${2}" 2>/dev/null \
        || return "${GPG_DEC_FAIL}"
      ;;
    s)
      printf "\n" \
        | gpg -o /dev/null \
          --no-options --yes --batch --pinentry-mode loopback \
          --sign --local-user "${2}" 2>/dev/null \
        || return "${GPG_SIGN_FAIL}"
      ;;
    a)
      unset ssh_pub_key
      ssh_pub_key="${TMPDIR}/ssh_pub_key"
      : 1>"${ssh_pub_key}"

      gpg -o "${ssh_pub_key}" --export-ssh-key "${2}" 2>/dev/null \
        || return "${GPG_EXP_SSH_FAIL}"

      #
      # Since there's no way of setting the behavior of the pinentry called by
      # ssh-add, to check whether the correct passphrase was cached, one must
      # try to kill the pinentry process: if pkill succeeds, the cached
      # passphrase is not the correct one; if it fails, it is the latter.
      #
      # The loop is to ensure there will be enough time between the call of
      # ssh-add and that of pkill, independently of system performance: since
      # the loops only runs while the ssh-add command is running, one can be
      # sure that the wrong passphrase cached will trigger the early return.
      #
      # The sleep call is just for avoiding calling the kill built-in as fast as
      # possible.
      #
      ssh-add -T "${ssh_pub_key}" 1>/dev/null 2>&1 &
      ssh_add_pid="${!}"
      while kill -0 "${ssh_add_pid}" 1>/dev/null 2>&1; do
        sleep 0.1
        pkill pinentry 1>/dev/null 2>&1 && return "${SSH_ADD_TEST_FAIL}"
      done
      ;;
  esac

  return 0
}

#
# Clear the cached passphrase.
#
# Globals:
#   GPG_AGENT_FAIL
#   GPG_AGENT_ERRMSG
#
# Parameters:
#   1: keygrip.
#
# Returns:
#   0, when successful;
#   GPG_AGENT_FAIL, when gpg-connect-agent fails to clear the cache.
#
clear_cache() {
  unset gpg_agent_output
  gpg_agent_output="$(gpg-connect-agent <<EOF
CLEAR_PASSPHRASE ${1}
EOF
)"
  case "${gpg_agent_output}" in
    OK*) return 0;;
    *)
      GPG_AGENT_ERRMSG="${gpg_agent_output}"
      return "${GPG_AGENT_FAIL}"
      ;;
  esac
}

#
# Cache non smart card keys
#
# Parameters:
#   1: keygrip;
#   2: a passphrase command (optional).
#
cache_key() {
  unset key passcmd trios errcode
  key="${1}"
  passcmd="${2}"
  trios=$(print_trios "${key}")
  errcode="${?}"

  case "${errcode}" in
    "${GPG_KEY_NOT_FOUND}")
      warn "gpg failed to find key of id \"${key}\"."
      return 0
      ;;
  esac


  while IFS="," read -r keytype keyfpr keygrip; do
    is_cached "${keygrip}" && {
      warn "Sub ${keytype} key is cached; skipping..."
      continue
    }

    unset errcode
    preset_passphrase "${keygrip}" "${passcmd}"
    errcode="${?}"
    [ "${errcode}" -ne 0 ] && {
      warn "Key \"${key}\" not cached."

      case "${errcode}" in
        "${GPP_FAIL}") warn "${GPP_ERRMSG}." ;;
        "${GPG_AGENT_FAIL}") warn "gpg-connect-agent: ${GPG_AGENT_ERRMSG}." ;;
      esac

      continue
    }

    unset errcode
    is_passphrase_correct "${keytype}" "${keyfpr}"
    errcode="${?}"
    if [ "${errcode}" -eq 0 ]; then
        warn "Successfuly cached sub ${keytype} key from \"${key}\"."
    else
      warn "Key \"${key}\" not cached."

      case "${errcode}" in
        "${GPG_ENC_FAIL}") warn "gpg failed to encrypt test message." ;;
        "${GPG_DEC_FAIL}") warn "gpg failed to decrypt test message." ;;
        "${GPG_SIGN_FAIL}") warn "gpg failed to sign test message." ;;
        "${GPG_EXP_SSH_FAIL}") warn "gpg failed to export ssh key." ;;
        "${SSH_ADD_TEST_FAIL}") warn "ssh-add failed to test public key." ;;
      esac

      warn "Clearing wrong password in cache."
      clear_cache "${keygrip}" || {
        warn "Failed to clear wrong password in cache."
        warn "Try to manually clear it by passing \"${key}\" keygrip"
        warn "to the CLEAR_PASSPHRASE command of gpg-connect-agent."
      }
    fi

  done <<EOF
$(printf "%s\n" "${trios}")
EOF
}

#
# Cache a key in a smart card.
#
# Parameters:
#   1: sc serial number.
#
cache_sc_key() {
  unset serialno
  serialno="${1}"

  unset gpg_agent_output
  gpg_agent_output="$(gpg-connect-agent "scd checkpin ${serialno}" /bye)"
  case "${gpg_agent_output}" in
    OK*) warn "Successfuly cached sc of serial number \"${serialno}\"." ;;
    ERR*) warn "gpg-connect-agent: ${gpg_agent_output}." ;;
  esac
}

#
# Print the help message to stdout.
# Globals:
#   PROGNAME
#
help_msg() {
  printf """
  Usage: %s [OPTION]... ID[:CACHE_OPTS] [ID[:CACHE_OPTS]]...
  Cache gpg keys.

  -g,\t\tSet the path to the gpg-preset-passphrase binary
  -h,\t\tPrint this help message to stdout
  -V,\t\tPrint the script's version

  CACHE_OPTS

  passcmd PASS_CMD,\tUse the stdout of PASS_CMD as the passphrase
  sc\t\t\tIndicate that ID is a hexadecimal smart card serial number

  " "${PROGNAME}"
}

main() {
  mkdir -p "${TMPDIR}"
  trap 'rm -rf "${TMPDIR}"' EXIT INT

  sopts=":g:hV"
  while getopts "${sopts}" opt; do
    case "${opt}" in
      "h")
        help_msg
        exit 0
        ;;
      "g")
        [ -x "${OPTARG}" ] || {
          warn "\"${OPTARG}\" is not executable."
          exit 1
        }

        GPP_BIN="${OPTARG}"
        ;;
      "V")
        printf "%s %s\n" "${PROGNAME}" "${VERSION}"
        exit 0
        ;;
      ":")
        warn "Option lacks argument -- \"${OPTARG}\"."
        exit 1
        ;;
      "?")
        warn "Unknown option -- \"${OPTARG}\"."
        exit 1
        ;;
    esac
  done

  shift $((OPTIND - 1))

  [ "${#}" -eq 0 ] && {
    warn "No key-id/serial number provided."
    exit 1
  }

  for k in "${@}"; do
    opts="${k##*:}"
    key="${k%":${opts}"}"
    
    if [ "${key}" != "${opts}" ]; then
      unset passcmd is_sc

      while IFS= read -r opt; do
          case "${opt}" in
            "passcmd"?*) passcmd="${opt#*[[:space:]]}" ;;
            "sc") is_sc="1" ;;
            *)
              warn "Unknown option \"${opt}\"; skipping \"${key}\"..."
              continue 2
              ;;
          esac
      done <<EOF
$(printf "%s\n" "${opts}" | tr ',' '\n')
EOF
    fi

    if [ -n "${is_sc}" ]; then
      [ -n "${passcmd}" ] && {
        warn "Option \"passcmd\" is incompatible with \"sc\" option."
        warn "Skipping..."
        continue
      }

      cache_sc_key "${key}"
    else
      cache_key "${key}" "${passcmd}"
    fi

  done
}

main "${@}"
